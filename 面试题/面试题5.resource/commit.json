{"compress":true,"commitItems":[["544641a3-b3df-4f4c-ba32-186acc8138f6",1525858518868,"",[[1525858494768,["13441@DESKTOP-JQ0ED5V",[[1,0,"面试题5\n===\n\n\n## 20个高级Java面试题汇总\n\n[程序猿](javascript:void(0);) _2015-08-22_\n\n这是一个高级Java面试系列题中的第一部分。这一部分论述了可变参数，断言，垃圾回收，初始化器，令牌化，日期，日历等等Java核心问题。\n\n*   程序员面试指南：https://www.youtube.com/watch?v=0xcgzUdTO5M\n\n*   Java面试问题集合指南：https://www.youtube.com/watch?v=GnR4hCvEIJQ\n\n1、什么是可变参数？\n\n2、断言的用途？\n\n3、什么时候使用断言？\n\n4、什么是垃圾回收？\n\n5、、用一个例子解释垃圾回收？\n\n6、什么时候运行垃圾回收？\n\n7、垃圾回收的最佳做法？\n\n8、什么是初始化数据块？\n\n9、什么是静态初始化器？\n\n10、什么是实例初始化块？\n\n11、什么是正则表达式？\n\n12、什么是令牌化？\n\n13、给出令牌化的例子？\n\n14、如何使用扫描器类（Scanner Class）令牌化？\n\n15、如何添加小时(hour)到一个日期对象（Date Objects）？\n\n16、如何格式化日期对象？\n\n17、Java中日历类（Calendar Class）的用途？\n\n18、如何在Java中获取日历类的实例？\n\n19、解释一些日历类中的重要方法？\n\n20、数字格式化类（Number Format Class）的用途？\n\n![](http://mmbiz.qpic.cn/mmbiz/NVvB3l3e9aHUnTeTe28kBpIAblNGvHmqnVXp3qVWq1cVvP9cWiat6mGW0JHYvC3xc8wgEO7dFIoJeGY1Vics8Zrw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1)\n\n**什么是可变参数？**\n\n可变参数允许调用参数数量不同的方法。请看下面例子中的求和方法。此方法可以调用1个int参数，或2个int参数，或多个int参数。\n\n> //int(type) followed ... (three dot's) is syntax of a variable argument.\n> \n> public int sum(int... numbers) {\n> \n> //inside the method a variable argument is similar to an array.\n> \n> //number can be treated as if it is declared as int[] numbers;\n> \n> int sum = 0;\n> \n> for (int number: numbers) {\n> \n> sum += number;\n> \n> }\n> \n> return sum;\n> \n> }\n> \n> public static void main(String[] args) {\n> \n> VariableArgumentExamples example = new VariableArgumentExamples();\n> \n> //3 Arguments\n> \n> System.out.println(example.sum(1, 4, 5));//10\n> \n> //4 Arguments\n> \n> System.out.println(example.sum(1, 4, 5, 20));//30\n> \n> //0 Arguments\n> \n> System.out.println(example.sum());//0\n> \n> }\n\n**断言的用途？**\n\n断言是在Java 1.4中引入的。它能让你验证假设。如果断言失败（即返回false），就会抛出AssertionError（如果启用断言）。基本断言如下所示。\n\n> private int computerSimpleInterest(int principal,float interest,int years){\n> \n> assert(principal>0);\n> \n> return 100;\n> \n> }\n\n**什么时候使用断言？**\n\n断言不应该用于验证输入数据到一个public方法或命令行参数。IllegalArgumentException会是一个更好的选择。在public方法中，只用断言来检查它们根本不应该发生的情况。\n\n**什么是垃圾回收？**\n\n垃圾回收是Java中自动内存管理的另一种叫法。垃圾回收的目的是为程序保持尽可能多的可用堆（heap）。 JVM会删除堆上不再需要从堆引用的对象。\n\n**用一个例子解释垃圾回收？**\n\n比方说，下面这个方法就会从函数调用。\n\n> void method(){\n> \n> Calendar calendar = new GregorianCalendar(2000,10,30);\n> \n> System.out.println(calendar);\n> \n> }\n\n通过函数第一行代码中参考变量calendar，在堆上创建了GregorianCalendar类的一个对象。\n\n函数结束执行后，引用变量calendar不再有效。因此，在方法中没有创建引用到对象。\n\nJVM认识到这一点，会从堆中删除对象。这就是所谓的垃圾回收。\n\n**什么时候运行垃圾回收？**\n\n垃圾回收在JVM突发奇想和心血来潮时运行（没有那么糟糕）。运行垃圾收集的可能情况是：\n\n*   堆可用内存不足\n\n*   CPU空闲\n\n**垃圾回收的最佳做法？**\n\n用编程的方式，我们可以要求（记住这只是一个请求——不是一个命令）JVM通过调用System.gc()方法来运行垃圾回收。\n\n当内存已满，且堆上没有对象可用于垃圾回收时，JVM可能会抛出OutOfMemoryException。\n\n对象在被垃圾回收从堆上删除之前，会运行finalize()方法。我们建议不要用finalize()方法写任何代码。\n\n**什么是初始化数据块？**\n\n初始化数据块——当创建对象或加载类时运行的代码。\n\n**有两种类型的初始化数据块：**\n\n**静态初始化器：**加载类时运行的的代码\n\n**实例初始化器：**创建新对象时运行的代码\n\n**什么是静态初始化器？**\n\n请看下面的例子：static{ 和 }之间的代码被称为静态初始化器。它只有在第一次加载类时运行。只有静态变量才可以在静态初始化器中进行访问。虽然创建了三个实例，但静态初始化器只运行一次。\n\n> public class InitializerExamples {\n> \n> static int count;\n> \n> int i;\n> \n> static{\n> \n> //This is a static initializers. Run only when Class is first loaded.\n> \n> //Only static variables can be accessed\n> \n> System.out.println(\"Static Initializer\");\n> \n> //i = 6;//COMPILER ERROR\n> \n> System.out.println(\"Count when Static Initializer is run is \" + count);\n> \n> }\n> \n> public static void main(String[] args) {\n> \n> InitializerExamples example = new InitializerExamples();\n> \n> InitializerExamples example2 = new InitializerExamples();\n> \n> InitializerExamples example3 = new InitializerExamples();\n> \n> }\n> \n> }\n\n**示例输出**\n\n> Static Initializer\n> \n> Count when Static Initializer is run is 0.\n\n**什么是实例初始化块？**\n\n让我们来看一个例子：每次创建类的实例时，实例初始化器中的代码都会运行。\n\n> public class InitializerExamples {\n> \n> static int count;\n> \n> int i;\n> \n> {\n> \n> //This is an instance initializers. Run every time an object is created.\n> \n> //static and instance variables can be accessed\n> \n> System.out.println(\"Instance Initializer\");\n> \n> i = 6;\n> \n> count = count + 1;\n> \n> System.out.println(\"Count when Instance Initializer is run is \" + count);\n> \n> }\n> \n> public static void main(String[] args) {\n> \n> InitializerExamples example = new InitializerExamples();\n> \n> InitializerExamples example1 = new InitializerExamples();\n> \n> InitializerExamples example2 = new InitializerExamples();\n> \n> }\n> \n> }\n\n**示例输出**\n\n> Instance Initializer\n> \n> Count when Instance Initializer is run is 1\n> \n> Instance Initializer\n> \n> Count when Instance Initializer is run is 2\n> \n> Instance Initializer\n> \n> Count when Instance Initializer is run is 3\n\n**什么是正则表达式？**\n\n正则表达式能让解析、扫描和分割字符串变得非常容易。Java中常用的正则表达式——Patter，Matcher和Scanner类。\n\n**什么是令牌化？**\n\n令牌化是指在分隔符的基础上将一个字符串分割为若干个子字符串。例如，分隔符；分割字符串ac;bd;def;e为四个子字符串ac，bd，def和e。\n\n分隔符自身也可以是一个常见正则表达式。\n\nString.split(regex)函数将regex作为参数。\n\n**给出令牌化的例子？**\n\n> private static void tokenize(String string,String regex) {\n> \n> String[] tokens = string.split(regex);\n> \n> System.out.println(Arrays.toString(tokens));\n> \n> }\n> \n> tokenize(\"ac;bd;def;e\",\";\");//[ac, bd, def, e]\n\n如何使用扫描器类（Scanner Class）令牌化？\n\n> private static void tokenizeUsingScanner(String string,String regex) {\n> \n> Scanner scanner = new Scanner(string);\n> \n> scanner.useDelimiter(regex);\n> \n> List<String> matches = new ArrayList<String>();\n> \n> while(scanner.hasNext()){\n> \n> matches.add(scanner.next());\n> \n> }\n> \n> System.out.println(matches);\n> \n> }\n> \n> tokenizeUsingScanner(\"ac;bd;def;e\",\";\");//[ac, bd, def, e]\n\n如何添加小时(hour)到一个日期对象（Date Objects）？\n\n现在，让我们如何看看添加小时到一个date对象。所有在date上的日期操作都需要通过添加毫秒到date才能完成。例如，如果我们想增加6个小时，那么我们需要将6小时换算成毫秒。6小时= 6 * 60 * 60 * 1000毫秒。请看以下的例子。\n\n> Date date = new Date();\n> \n> //Increase time by 6 hrs\n> \n> date.setTime(date.getTime() + 6 * 60 * 60 * 1000);\n> \n> System.out.println(date);\n> \n> //Decrease time by 6 hrs\n> \n> date = new Date();\n> \n> date.setTime(date.getTime() - 6 * 60 * 60 * 1000);\n> \n> System.out.println(date);\n\n**如何格式化日期对象？**\n\n格式化日期需要使用DateFormat类完成。让我们看几个例子。\n\n> //Formatting Dates\n> \n> System.out.println(DateFormat.getInstance().format(\n> \n> date));//10/16/12 5:18 AM\n\n带有区域设置的格式化日期如下所示：\n\n> System.out.println(DateFormat.getDateInstance(\n> \n> DateFormat.FULL, new Locale(\"it\", \"IT\"))\n> \n> .format(date));//marted&ldquo; 16 ottobre 2012\n> \n> System.out.println(DateFormat.getDateInstance(\n> \n> DateFormat.FULL, Locale.ITALIAN)\n> \n> .format(date));//marted&ldquo; 16 ottobre 2012\n> \n> //This uses default locale US\n> \n> System.out.println(DateFormat.getDateInstance(\n> \n> DateFormat.FULL).format(date));//Tuesday, October 16, 2012\n> \n> System.out.println(DateFormat.getDateInstance()\n> \n> .format(date));//Oct 16, 2012\n> \n> System.out.println(DateFormat.getDateInstance(\n> \n> DateFormat.SHORT).format(date));//10/16/12\n> \n> System.out.println(DateFormat.getDateInstance(\n> \n> DateFormat.MEDIUM).format(date));//Oct 16, 2012\n> \n> System.out.println(DateFormat.getDateInstance(\n> \n> DateFormat.LONG).format(date));//October 16, 2012\n\n**Java中日历类（Calendar Class）的用途？**\n\nCalendar类（Youtube视频链接 - https://www.youtube.com/watch?v=hvnlYbt1ve0）在Java中用于处理日期。Calendar类提供了增加和减少天数、月数和年数的简便方法。它还提供了很多与日期有关的细节（这一年的哪一天？哪一周？等等）\n\n**如何在Java中获取日历类（Calendar Class）的实例？**\n\nCalendar类不能通过使用new Calendar创建。得到Calendar类实例的最好办法是在Calendar中使用getInstance() static方法。\n\n> //Calendar calendar = new Calendar(); //COMPILER ERROR\n> \n> Calendar calendar = Calendar.getInstance();\n\n**解释一些日历类（Calendar Class）中的重要方法？**\n\n在Calendar对象上设置日（day），月（month）或年（year）不难。对Day，Month或Year调用恰当Constant的set方法。下一个参数就是值。\n\n> calendar.set(Calendar.DATE, 24);\n> \n> calendar.set(Calendar.MONTH, 8);//8 - September\n> \n> calendar.set(Calendar.YEAR, 2010);\n\ncalendar get方法\n\n要获取一个特定日期的信息——2010年9月24日。我们可以使用calendar get方法。已被传递的参数表示我们希望从calendar中获得的值—— 天或月或年或……你可以从calendar获取的值举例如下：\n\n> System.out.println(calendar.get(Calendar.YEAR));//2010\n> \n> System.out.println(calendar.get(Calendar.MONTH));//8\n> \n> System.out.println(calendar.get(Calendar.DATE));//24\n> \n> System.out.println(calendar.get(Calendar.WEEK_OF_MONTH));//4\n> \n> System.out.println(calendar.get(Calendar.WEEK_OF_YEAR));//39\n> \n> System.out.println(calendar.get(Calendar.DAY_OF_YEAR));//267\n> \n> System.out.println(calendar.getFirstDayOfWeek());//1 -> Calendar.SUNDAY\n> \n> 数字格式化类（Number Format Class）的用途？\n\n**数字格式化类（Number Format Class）的用途？**\n\n数字格式用于格式化数字到不同的区域和不同格式中。\n\n使用默认语言环境的数字格式\n\n> System.out.println(NumberFormat.getInstance().format(321.24f));//321.24\n\n使用区域设置的数字格式\n\n使用荷兰语言环境格式化数字：\n\n> System.out.println(NumberFormat.getInstance(new Locale(\"nl\")).format(4032.3f));//4.032,3\n\n使用德国语言环境格式化数字：\n\n> System.out.println(NumberFormat.getInstance(Locale.GERMANY).format(4032.3f));//4.032,3\n\n使用默认语言环境格式化货币\n\n> System.out.println(NumberFormat.getCurrencyInstance().format(40324.31f));//$40,324.31\n\n使用区域设置格式化货币\n\n使用荷兰语言环境格式化货币：\n\n> System.out.println(NumberFormat.getCurrencyInstance(new Locale(\"nl\")).format(40324.31f));//? 40.324,31\n\n**许可证**\n\n这篇文章，以及任何相关的源代码和文件，依据The Code Project Open License (CPOL)。"]],[0,0],[8661,8661]]],[1525858498664,["13441@DESKTOP-JQ0ED5V",[[-1,5,"==="],[-1,56," "],[1,57," "]],[8661,8661],[5,5]]],[1525858500871,["13441@DESKTOP-JQ0ED5V",[[1,27,"\n"]],[25,25],[26,26]]],[1525858501102,["13441@DESKTOP-JQ0ED5V",[[1,26,"==="]],[26,26],[29,29]]],[1525858508376,["13441@DESKTOP-JQ0ED5V",[[-1,26,"==="]],[29,29],[26,26]]],[1525858508853,["13441@DESKTOP-JQ0ED5V",[[-1,27,"\n"]],[26,26],[25,25]]],[1525858509296,["13441@DESKTOP-JQ0ED5V",[[1,5,"==="],[1,53," "],[-1,53," "]],[5,5],[8661,8661]]]]]]}